// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package models

// Achievement defines model for Achievement.
type Achievement struct {
	// Achieved has this been achieved
	Achieved      *bool    `json:"achieved,omitempty"`
	Name          string   `json:"name"`
	RewardAmount  *float32 `json:"rewardAmount,omitempty"`
	RewardMessage *string  `json:"rewardMessage,omitempty"`
}

// Alert defines model for Alert.
type Alert struct {
	Deterant *string `json:"deterant,omitempty"`
	Message  string  `json:"message"`
}

// Bucket defines model for Bucket.
type Bucket struct {
	// Amount current amount in the bucket so far
	Amount  float32        `json:"amount"`
	History *[]Transaction `json:"history,omitempty"`

	// Name Name of the bucket
	Name string `json:"name"`

	// Overflowm has this bucket overflown
	Overflowm *bool `json:"overflowm,omitempty"`

	// Rule literally magic
	Rule *string `json:"rule,omitempty"`

	// Total total amount of this bucket
	Total float32 `json:"total"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Profile defines model for Profile.
type Profile struct {
	// FinancialKnowledgeLevel how smarticles the user in
	FinancialKnowledgeLevel *int `json:"financialKnowledgeLevel,omitempty"`

	// HappinessLevel how good the user is doing
	HappinessLevel *int `json:"happinessLevel,omitempty"`

	// InsultLevel level of insults
	InsultLevel *int `json:"insultLevel,omitempty"`

	// MonthlySalary amount of money made per month
	MonthlySalary *int `json:"monthlySalary,omitempty"`

	// Name Name of the user
	Name string `json:"name"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	// Amount amount of the transaction
	Amount *float32 `json:"amount,omitempty"`

	// Description human readable explanation of transaction
	Description *string `json:"description,omitempty"`

	// Expense if this is an expesne or not
	Expense *bool `json:"expense,omitempty"`

	// Timestamp timestamp of transaction
	Timestamp string `json:"timestamp"`
}

// User defines model for User.
type User struct {
	Achievements *[]Achievement `json:"achievements,omitempty"`
	Alerts       *[]Alert       `json:"alerts,omitempty"`
	Buckets      *[]Bucket      `json:"buckets,omitempty"`

	// Id Unique id of the user
	Id      int32   `json:"id"`
	Profile Profile `json:"profile"`

	// TimeFrame Type of time frame (default monthly)
	TimeFrame *string `json:"timeFrame,omitempty"`
}

// FindUsersParams defines parameters for FindUsers.
type FindUsersParams struct {
	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddUserJSONRequestBody defines body for AddUser for application/json ContentType.
type AddUserJSONRequestBody = User

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// AddAchievementsJSONRequestBody defines body for AddAchievements for application/json ContentType.
type AddAchievementsJSONRequestBody = Achievement

// UpdateAchievementsJSONRequestBody defines body for UpdateAchievements for application/json ContentType.
type UpdateAchievementsJSONRequestBody = Achievement

// AddAlertJSONRequestBody defines body for AddAlert for application/json ContentType.
type AddAlertJSONRequestBody = Alert

// UpdateAlertJSONRequestBody defines body for UpdateAlert for application/json ContentType.
type UpdateAlertJSONRequestBody = Alert

// AddBucketJSONRequestBody defines body for AddBucket for application/json ContentType.
type AddBucketJSONRequestBody = Bucket

// UpdateBucketJSONRequestBody defines body for UpdateBucket for application/json ContentType.
type UpdateBucketJSONRequestBody = Bucket

// InsertTransactionJSONRequestBody defines body for InsertTransaction for application/json ContentType.
type InsertTransactionJSONRequestBody = Transaction
